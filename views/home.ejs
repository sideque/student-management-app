<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #d70000 0%, #000000 100%);
        }

        .card-shadow {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .hover-scale {
            transition: transform 0.2s ease;
        }

        .hover-scale:hover {
            transform: scale(1.02);
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .table-row:hover {
            background-color: #f8fafc;
        }
    </style>
</head>

<body class="min-h-screen gradient-bg">
    <div class="container mx-auto p-6">
        <!-- Header Section -->
        <div class="text-center mb-8 animate-fade-in">
            <h1 class="text-5xl font-bold text-white mb-2">
                <i class="fas fa-graduation-cap mr-3"></i>
                Student Management
            </h1>
            <p class="text-white text-lg opacity-90">Manage your students with ease and efficiency</p>
        </div>

        <!-- Message Alert -->
        <% if (typeof message !=='undefined' ) { %>
            <div id="message"
                class="mb-6 px-6 py-4 rounded-lg shadow-lg <%= message.type === 'success' ? 'bg-green-100 text-green-800 border-l-4 border-green-500' : 'bg-red-100 text-red-800 border-l-4 border-red-500' %> animate-fade-in">
                <div class="flex items-center">
                    <i
                        class="<%= message.type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle' %> mr-3"></i>
                    <%= message.content %>
                </div>
            </div>
            <% } %>


             <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="glass-effect rounded-2xl p-6 hover-lift">
                <div class="flex items-center">
                    <div class="p-3 bg-red-600 rounded-full mr-4 pulse-red">
                        <i class="fas fa-users text-2xl"></i>
                    </div>
                    <div>
                        <h3 class="text-3xl font-bold text-red-400"><%= students.length %></h3>
                        <p class="text-gray-400">Total Students</p>
                    </div>
                </div>
            </div>
            <div class="glass-effect rounded-2xl p-6 hover-lift">
                <div class="flex items-center">
                    <div class="p-3 bg-gradient-to-r from-red-500 to-pink-600 rounded-full mr-4">
                        <i class="fas fa-book text-2xl"></i>
                    </div>
                    <div>
                        <h3 class="text-3xl font-bold text-pink-400"><%= [...new Set(students.map(s => s.course))].length %></h3>
                        <p class="text-gray-400">Active Courses</p>
                    </div>
                </div>
            </div>
            <div class="glass-effect rounded-2xl p-6 hover-lift">
                <div class="flex items-center">
                    <div class="p-3 bg-black border-2 border-red-500 rounded-full mr-4">
                        <i class="fas fa-layer-group text-2xl text-red-400"></i>
                    </div>
                    <div>
                        <h3 class="text-3xl font-bold text-red-300"><%= [...new Set(students.map(s => s.batch))].length %></h3>
                        <p class="text-gray-400">Active Batches</p>
                    </div>
                </div>
            </div>
        </div>



                <!-- Controls Section -->
                <div class="bg-white rounded-xl shadow-lg p-6 mb-6 animate-fade-in">
                    <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
                        <!-- Search Bar -->
                        <div class="flex-1 relative">
                            <!-- Search Button on the right -->
                            <button onclick="search()" type="submit"
                                class="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-500 hover:text-blue-600">
                                <i class="fas fa-search"></i>
                            </button>

                            <!-- Input with padding to the right for the button -->
                            <input id="searchInput" type="text" placeholder="Search students..."
                                class="w-full pr-12 pl-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200">
                        </div>

                        <!-- Add Student Button -->
                        <button
                            class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover-scale shadow-lg flex items-center gap-2"
                            onclick="document.getElementById('addModal').classList.remove('hidden')">
                            <i class="fas fa-plus"></i>
                            Add Student
                        </button>
                    </div>
                </div>

                <!-- Student Table -->
                <div class="bg-white rounded-xl shadow-lg overflow-hidden animate-fade-in">
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead class="bg-gradient-to-r from-blue-500 to-purple-600 text-white">
                                <tr>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-user mr-2"></i>Name
                                    </th>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-envelope mr-2"></i>Email
                                    </th>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-birthday-cake mr-2"></i>Age
                                    </th>
                                    <th class="px-6 py-4 text-left ">
                                        <i class="fas fa-book mr-2"></i>Course
                                    </th>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-layer-group mr-2"></i>Batch
                                    </th>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-calendar mr-2"></i>Created
                                    </th>
                                    <th class="px-6 py-4 text-left font-semibold">
                                        <i class="fas fa-sync mr-2"></i>Updated
                                    </th>
                                    <th class="px-6 py-4 text-center font-semibold">
                                        <i class="fas fa-cogs mr-2"></i>Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="studentTableBody">
                                <% students.forEach((student, index)=> { %>
                                    <tr class="table-row border-b border-gray-200">
                                        <td class="px-6 py-4">
                                            <div class="flex items-center">
                                                <div
                                                    class="w-10 h-10 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center mr-3">
                                                    <i class="fas fa-user text-white"></i>
                                                </div>
                                                <span class="font-semibold text-gray-800">
                                                    <%= student.name %>
                                                </span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 text-gray-600">
                                            <%= student.email %>
                                        </td>
                                        <td class="px-6 py-4 text-gray-600">
                                            <%= student.age %>
                                        </td>
                                        <td class="px-6 py-4">
                                            <span
                                                class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                                                <%= student.course %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4">
                                            <span
                                                class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-medium">
                                                <%= student.batch %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 text-gray-600">
                                            <%= new Date(student.createdAt).toLocaleDateString() %>
                                        </td>
                                        <td class="px-6 py-4 text-gray-600">
                                            <%= new Date(student.updatedAt).toLocaleDateString() %>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex gap-2 justify-center">
                                                <button
                                                    class="bg-yellow-500 text-white px-3 py-2 rounded-lg font-semibold hover:bg-yellow-600 transition-colors flex items-center gap-1"
                                                    onclick="openEditModal('<%=student._id %>','<%= student.name %>', '<%= student.age %>', '<%= student.email %>', '<%= student.batch %>', '<%= student.course %>')"
                                                    title="Edit Student">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button
                                                    class="bg-red-500 text-white px-3 py-2 rounded-lg font-semibold hover:bg-red-600 transition-colors flex items-center gap-1 delete-btn"
                                                    data-id="<%= student._id %>" title="Delete Student">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Add Modal -->
                <form id="AddForm" method="post">
                    <div id="addModal"
                        class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center">
                        <div class="bg-white p-6 rounded-xl shadow-2xl w-full max-w-md mx-4">
                            <h2 class="text-2xl font-bold mb-4 text-center text-gray-800">Add New Student</h2>
                            <!-- Name -->
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Name</label>
                                <input type="text" name="name" id="name"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <p id="nameError" class="text-red-500 text-sm mt-1 hidden">Name must be at least 2
                                    letters</p>
                            </div>

                            <!-- Age -->
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Age</label>
                                <input type="number" name="age" id="age"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <p id="ageError" class="text-red-500 text-sm mt-1 hidden">Enter a valid age (1–120)</p>
                            </div>

                            <!-- Email -->
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Email</label>
                                <input type="email" name="email" id="email"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <p id="emailError" class="text-red-500 text-sm mt-1 hidden">Invalid email format</p>
                            </div>

                            <!-- Batch -->
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Batch</label>
                                <input type="text" name="batch" id="batch"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <p id="batchError" class="text-red-500 text-sm mt-1 hidden">Batch is required (letters &
                                    digits only)</p>
                            </div>

                            <!-- Course -->
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Course</label>
                                <input type="text" name="course" id="course"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <p id="courseError" class="text-red-500 text-sm mt-1 hidden">Course is required</p>
                            </div>

                            <div class="flex justify-end gap-2">
                                <button type="button"
                                    class="bg-gray-500 text-white px-4 py-2 rounded-lg mr-2 hover:bg-gray-600 transition-colors"
                                    onclick="document.getElementById('addModal').classList.add('hidden')">Cancel</button>
                                <button
                                    class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Save</button>
                            </div>
                        </div>
                    </div>
                </form>

                <!-- Edit Modal -->
                <form id="editForm" method="post">
                    <div id="editModal"
                        class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center">
                        <div class="bg-white p-6 rounded-xl shadow-2xl w-full max-w-md mx-4">
                            <h2 class="text-2xl font-bold mb-4 text-center text-gray-800">Edit Student</h2>
                            <input type="hidden" id="editId" name="id">
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Name</label>
                                <input id="editName" name="name" type="text"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            </div>
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Age</label>
                                <input id="editAge" name="age" type="number"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            </div>
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Email</label>
                                <input id="editEmail" name="email" type="email"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            </div>
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Batch</label>
                                <input id="editBatch" name="batch" type="text"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            </div>
                            <div class="mb-4">
                                <label class="block mb-2 text-gray-700 font-semibold">Course</label>
                                <input id="editCourse" name="course" type="text"
                                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            </div>
                            <div class="flex justify-end gap-2">
                                <button type="button"
                                    class="bg-gray-500 text-white px-4 py-2 rounded-lg mr-2 hover:bg-gray-600 transition-colors"
                                    onclick="document.getElementById('editModal').classList.add('hidden')">
                                    Cancel
                                </button>
                                <button
                                    class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Save</button>
                            </div>
                        </div>
                    </div>
                </form>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        const validators = {
            name: {
                regex: /^[A-Za-z\s]{2,}$/, // at least 2 letters
                errorMsg: "Name must be at least 2 letters"
            },
            age: {
                regex: /^(1[1][0-9]|100|[1-9][0-9]?)$/, // age 1-120
                errorMsg: "Enter a valid age (1–100)"
            },
            email: {
                regex: /^[a-zA-Z][a-zA-Z0-9._%+-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/, // basic email
                errorMsg: "Invalid email format"
            },
            batch: {
                regex: /^[A-Za-z0-9\s]{2,}$/, // letters and numbers only
                errorMsg: "Batch is required (letters & digits only)"
            },
            course: {
                regex: /^[A-Za-z\s]{2,}$/, // at least 2 letters
                errorMsg: "Course is required"
            }
        };

        
        function validateField(fieldId) {
            const input = document.getElementById(fieldId);
            const error = document.getElementById(fieldId + "Error");
            const { regex, errorMsg } = validators[fieldId];
            const value = input.value.trim();

            if (!regex.test(value)) {
                input.classList.add('border-red-500');
                error.textContent = errorMsg;
                error.classList.remove('hidden');
                return false;
            } else {
                input.classList.remove('border-red-500');
                error.classList.add('hidden');
                return true;
            }
        }
        Object.keys(validators).forEach(fieldId => {
            const input = document.getElementById(fieldId);
            input.addEventListener('input', () => validateField(fieldId));
        });


        function generateStudentRow(student) {
            return `
                    <tr class="table-row border-b border-gray-200">
                        <td class="px-6 py-4">
                            <div class="flex items-center">
                                <div class="w-10 h-10 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center mr-3">
                                    <i class="fas fa-user text-white"></i>
                                </div>
                                <span class="font-semibold text-gray-800">${student.name}</span>
                            </div>
                        </td>
                        <td class="px-6 py-4 text-gray-600">${student.email}</td>
                        <td class="px-6 py-4 text-gray-600">${student.age}</td>
                        <td class="px-6 py-4">
                            <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                                ${student.course}
                            </span>
                        </td>
                        <td class="px-6 py-4">
                            <span class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-medium">
                                ${student.batch}
                            </span>
                        </td>
                        <td class="px-6 py-4 text-gray-600">${new Date(student.createdAt).toLocaleDateString()}</td>
                        <td class="px-6 py-4 text-gray-600">${new Date(student.updatedAt).toLocaleDateString()}</td>
                        <td class="px-6 py-4">
                            <div class="flex gap-2 justify-center">
                                <button
                                    class="bg-yellow-500 text-white px-3 py-2 rounded-lg font-semibold hover:bg-yellow-600 transition-colors flex items-center gap-1"
                                    onclick="openEditModal('${student._id}','${student.name}', '${student.age}', '${student.email}', '${student.batch}', '${student.course}')"
                                    title="Edit Student">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button
                                    class="bg-red-500 text-white px-3 py-2 rounded-lg font-semibold hover:bg-red-600 transition-colors flex items-center gap-1"
                                    onclick="del('${student._id}')"
                                    title="Delete Student">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                     `;
        }

        function attachDeleteListeners() {
            document.querySelectorAll('.delete-btn').forEach((btn) => {
                btn.addEventListener("click", () => {
                    const id = btn.dataset.id;
                    del(id);
                });
            });
        }

        // Call it initially
        attachDeleteListeners();
        document.getElementById("searchInput").addEventListener("input", search);

        function openEditModal(id, name, age, email, batch, course) {
            document.getElementById('editId').value = id
            document.getElementById('editName').value = name;
            document.getElementById('editAge').value = age;
            document.getElementById('editEmail').value = email;
            document.getElementById('editBatch').value = batch;
            document.getElementById('editCourse').value = course;
            document.getElementById('editModal').classList.remove('hidden');
        }

        const EditForm = document.getElementById('editForm')
        EditForm.addEventListener("submit", (e) => {
            e.preventDefault()
            const editId = document.getElementById('editId').value
            const formData = new FormData(EditForm)
            const name = formData.get('name').trim();
            const age = formData.get('age').trim();
            const email = formData.get('email').trim();
            const batch = formData.get('batch').trim();
            const course = formData.get('course').trim();

            // Regex Patterns
            const nameRegex = /^[A-Za-z\s]+$/;
            const emailRegex = /^[a-zA-Z][a-zA-Z0-9._%+-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;;
            const batchRegex = /^[A-Za-z0-9\s]+$/;
            const courseRegex = /^[A-Za-z\s]+$/;
            const ageRegex = /^(1[1][0-9]|100|[1-9][0-9]?)$/;
            // Validation Flags
            let errors = [];

            if (!name || !nameRegex.test(name)) errors.push("Name is invalid.");
            if (!age || isNaN(age) || parseInt(age) <= 0) errors.push("Age must be a positive number.");
            if (!ageRegex.test(age)) errors.push("age should be between 1 to 100")
            if (!email || !emailRegex.test(email)) errors.push("Email format is invalid.");
            if (!batch || !batchRegex.test(batch)) errors.push("Batch is invalid.");
            if (!course || !courseRegex.test(course)) errors.push("Course is invalid.");

            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Form Validation Failed',
                    html: errors.join("<br>"), // display all errors
                    confirmButtonColor: '#d33'
                });
                return; // stop further execution
            }
            const EditedData = {
                id: editId,
                name: formData.get('name'),
                age: formData.get('age'),
                email: formData.get('email'),
                batch: formData.get('batch'),
                course: formData.get('course'),
            }
            fetch('/editStudent', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(EditedData)
            })
                .then((res) => res.json())
                .then((response) => {
                    console.log(response)
                    if (response.success) {
                        document.getElementById('editModal').classList.add('hidden')
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: response.message,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        })
                        const tbody = document.getElementById("studentTableBody");
                        tbody.innerHTML = "";
                        response.students.forEach((student) => {
                            tbody.innerHTML += generateStudentRow(student)
                        })
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Update Failed',
                            text: response.message || 'Failed to update student.',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Retry'
                        });
                    }

                })
        })

        function del(id) {
            console.log(id, 'id')
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/delete/${id}`, {
                        method: "DELETE",
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            console.log(data, 'data');
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'Student deleted successfully!',
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    const tbody = document.getElementById("studentTableBody");
                                    tbody.innerHTML = "";
                                    const students = data.students
                                    students.forEach((student) => {
                                        tbody.innerHTML += generateStudentRow(student)
                                    })

                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: data.message || "Deletion failed.",
                                    confirmButtonColor: '#d33',
                                    confirmButtonText: 'OK'
                                });
                            }
                        })
                        .catch((err) => {
                            console.error("Error deleting student:", err);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: "Something went wrong while deleting.",
                                confirmButtonColor: '#d33',
                                confirmButtonText: 'OK'
                            });
                        });
                } else {
                    console.log("User cancelled the deletion.");
                }
            });
        }

        const message = document.getElementById('message')
        setTimeout(() => {
            if (message) {
                message.style.display = "none"
            } else {
                message.style.display = "display"
            }
        }, 3000);

        function search() {
            const query = document.getElementById("searchInput").value.trim();
            fetch(`/search/searchterm?q=${encodeURIComponent(query)}`)
                .then(response => {
                    if (!response.ok) throw new Error("Network error");
                    return response.json();
                })
                .then(data => {
                    const tbody = document.getElementById("studentTableBody");
                    tbody.innerHTML = "";
                    if (data.length === 0) {
                        tbody.innerHTML = `<tr><td colspan="8" class="px-6 py-8 text-center text-gray-500">No students found.</td></tr>`;
                        return;
                    }

                    data.forEach(student => {
                        tbody.innerHTML += generateStudentRow(student);
                    });
                })
                .catch(err => {
                    console.error("Search failed:", err);
                });
        }

        const addForm = document.getElementById('AddForm')
        addForm.addEventListener("submit", (e) => {
            e.preventDefault()
            let formdata = new FormData(addForm)
            let data = {
                name: formdata.get('name'),
                age: formdata.get('age'),
                email: formdata.get('email'),
                batch: formdata.get('batch'),
                course: formdata.get('course')
            }
            let isFormValid = true;
            Object.keys(validators).forEach(fieldId => {
                const valid = validateField(fieldId);
                if (!valid) isFormValid = false;
            });

            if (!isFormValid) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Form is invalid',
                    text: 'Please fix the highlighted fields before submitting.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Okay'
                });
            } else {
                fetch("/addStudent", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                })
                    .then((res) => res.json())
                    .then((data) => {
                        console.log(data, 'data')
                        if (data.success === false) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Something Went Wrong',
                                text: data.message,
                                confirmButtonText: 'OK',
                                confirmButtonColor: '#d33'
                            });
                            return;
                        }
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Added successfully',
                                showConfirmButton: false,
                                timer: 1500
                            });

                        }
                        const tbody = document.getElementById("studentTableBody");
                        tbody.innerHTML = "";
                        if (data.length === 0) {
                            tbody.innerHTML = `<tr><td colspan="8" class="px-6 py-8 text-center text-gray-500">No students found.</td></tr>`;
                            return;
                        }

                        const modal = document.getElementById('addModal')
                        const form = document.getElementById('AddForm')
                        modal.classList.add('hidden')
                        form.reset()
                        console.log(data.students, 'here it is')
                        data.students.forEach(student => {
                            tbody.innerHTML += generateStudentRow(student)
                        });
                    })
            }
        })
    </script>
</body>

</html> 